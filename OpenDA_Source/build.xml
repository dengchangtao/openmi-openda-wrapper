<project name="openDA" default="help" basedir=".">
<!--
================================================================================
  Ant build file for openda java code
  install ant and type
  "ant help"
  for a list of options
================================================================================
-->
    <target name="help">
        <echo>
            ant help                     --> print this help
            ant build                    --> compile, make jar and copy resources for all 
        	                                 platforms
            ant build-win32              --> compile, make jar, copy resources for win32
        	                                 remove resources for other platforms
            ant clean                    --> remove output
            ant doc                      --> collect documentation
            ant test                     --> execute unit tests (excluding broken tests)
            ant test-all                 --> execute all unit tests
            ant test-broken              --> execute broken unit tests
            ant zip                      --> creates zipfiles with sources, binaries, 
                                             documentation and xmlschemas
            ant zip-win32                --> creates zipfiles with sources, binaries, 
                                             documentation and xmlschemas for win32
            ant zip-tests                --> zip public test cases
        </echo>
    </target>

<property file="project.properties"/>

    <macrodef name="testing">
	    <attribute name="v" default="NOT SET"/>
	    <sequential>
		    <echo>v is @{v}</echo>
	    </sequential>
    </macrodef>

    <target name="debug">
        <echo>
		module=${module}
		srcdir=${srcdir}
		jarname=${jarname}
		bindir=${bindir}
	</echo>
	<testing v="This is v" />
	<testing v="This is w" />
    </target>


<!--
===========================================================================
	Compilation
===========================================================================
-->
    <target name="build" depends="init" >
	<buildmodule module="core" />
	<buildmodule module="observers" />
	<buildmodule module="models" />
	<buildmodule module="algorithms" />
	<buildmodule module="application" />
    <buildmodule module="model_efdc" />
    <buildmodule module="model_efdc_dll"/>
    <buildmodule module="model_example_blackbox" />
    <buildmodule module="model_example_fortran" />
    <buildmodule module="model_hspf" />
    <buildmodule module="model_swan"/>
    <buildmodule module="model_wflow"/>
	<chmod dir="${projectlib}" perm="ugo+rx" includes="**/*.sh"/>
	<chmod dir="${projectlib}" perm="ugo+rx" includes="**/*.pl"/>
    </target>
	
    <target name="build-win32" depends="build,copy-win32-executables,copy-jre-win32" />
	
    <target name="doc" depends="init">
	<docmodule module="core" />
	<docmodule module="observers" />
	<docmodule module="models" />
	<docmodule module="algorithms" />
        <docmodule module="model_efdc"/>
        <docmodule module="model_efdc_dll"/>
        <docmodule module="model_example_blackbox" />
        <docmodule module="model_example_fortran" />
        <docmodule module="model_hspf"/>
		<docmodule module="model_swan" />
		<docmodule module="model_wflow"/>
	<copy todir="${projectdoc}/javadoc" >
		<fileset dir="core/doc/javadoc_menu" />
	</copy>
    </target>

    <macrodef name="docmodule">
	    <attribute name="module" default="NOT SET"/>
	    <sequential>
		    <echo>doc module @{module}</echo>
		    <ant antfile="build.xml" dir="@{module}" target="javadoc" inheritAll="false" />
		    <mkdir dir="${projectdoc}/javadoc" />
		    <copy todir="${projectdoc}/javadoc" >
			    <fileset dir="@{module}/javadoc" />
		    </copy>
		    <copy todir="${projectdoc}" >
			    <fileset dir="@{module}/doc" />
		    </copy>
		    <copy todir="${xmlschemadir}" >
			    <fileset dir="@{module}/xmlSchemas" includes="**/*.xsd"  />
		    </copy>
	    </sequential>
    </macrodef>

    <macrodef name="buildmodule">
	    <attribute name="module" default="NOT SET"/>
	    <sequential>
		    <echo>build for module @{module}</echo>
		    <ant antfile="build.xml" dir="@{module}" target="build" inheritAll="false" />
		    <copy todir="${projectlib}" >
			    <fileset dir="@{module}/bin" />
		    </copy>
	    </sequential>
    </macrodef>

    <target name="copy-win32-executables">

        <copy  toDir="${modulebindir}" flatten="yes">
           <fileset dir = "${modulebindir}/win32_ifort"/>
            <fileset dir = "${modulebindir}/win32_gfortran"/>
        </copy>
    	
        <delete dir="${modulebindir}/win32_ifort"/>
        <delete dir="${modulebindir}/win32_gfortran"/>
        <delete dir="${modulebindir}/darwin"/>
        <delete dir="${modulebindir}/linux32_gnu"/>
        <delete dir="${modulebindir}/linux64_gnu"/>

    	<delete>
            <fileset dir="${modulebindir}">
                <include name="**.sh"/>
                <include name="**.csh"/>
            </fileset>
    	</delete>
    	
    </target>

	<target name="copy-jre-win32">
		<copy  toDir="${projectjre}">
		   <fileset dir = "thirdparty/jre/jre6_win32"/>
		</copy>
	</target>

<!--
===========================================================================
	Tools: init, clean, etc.
===========================================================================
-->
    <target name="init">
        <tstamp/>
	<mkdir dir="${projectbin}"/>
	<mkdir dir="${projectdoc}"/>
	<mkdir dir="${xmlschemadir}"/>
	<mkdir dir="${projectjre}"/>
    </target>

    <target name="clean">
    	<delete dir="${projectbin}"/>
    	<delete dir="${projectdoc}"/>
    	<delete dir="${xmlschemadir}"/>
    	<delete dir="${testrundir}"/>
        <delete dir="${testbuilddir}"/>
        <delete dir="${testreportdir}"/>
        <delete dir="${projectjre}"/>
    	<cleanmodule module="core" />
    	<cleanmodule module="observers" />
    	<cleanmodule module="models" />
    	<cleanmodule module="algorithms" />
        <cleanmodule module="application" />
        <cleanmodule module="model_efdc" />
        <cleanmodule module="model_efdc_dll" />
        <cleanmodule module="model_example_blackbox" />
        <cleanmodule module="model_example_fortran" />
        <cleanmodule module="model_hspf" />
        <cleanmodule module="model_swan"/>
        <cleanmodule module="model_wflow"/>
    </target>

    <macrodef name="cleanmodule">
	    <attribute name="module" default="NOT SET"/>
	    <sequential>
		    <echo>clean for module @{module}</echo>
		    <ant antfile="build.xml" dir="@{module}" target="clean" inheritAll="false" />
	    </sequential>
    </macrodef>

	<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
		<classpath>
			<fileset dir="core/java/resources/svnant-1.3.0/lib" includes="**/*.jar" />
		</classpath>
	</taskdef>

    <target name="svn-revision" >
		<svn>
			<status path="." revisionProperty="svn.revision" />
		</svn>
		<echo>Subversion Revision: ${svn.revision}</echo>
	</target>

	<target name="zip" depends="svn-revision,chmod-linux-native,build,doc,zip-src,zip-bin,zip-doc,zip-schemas" /> 
    <target name="zip-win32" depends="svn-revision,build-win32,doc,zip-src,zip-bin,zip-doc,zip-schemas,zip-jre" />
	
    <target name="zip-src">
		<zip destfile="${projectname}_${version}_r${svn.revision}_src.zip">
			<zipfileset dir="doc" prefix="openda_${version}/doc"/>
			<zipfileset dir="tests" prefix="openda_${version}/examples" excludes="*.svn" />
			<zipfileset dir="xmlSchemas" prefix="openda_${version}/xmlSchemas" excludes="*.svn" />
			<zipfileset dir="jre" prefix="openda_${version}/jre" excludes="*.svn" />
			<zipfileset dir="core" prefix="openda_${version}/core" excludes="*.svn" />
			<zipfileset dir="models" prefix="openda_${version}/models" excludes="*.svn" />
			<zipfileset dir="observers" prefix="openda_${version}/observers" excludes="*.svn" />
			<zipfileset dir="algorithms" prefix="openda_${version}/algorithms" excludes="*.svn" />
			<zipfileset dir="application" prefix="openda_${version}/application" excludes="*.svn" />
			<zipfileset dir="module_template" prefix="openda_${version}/module_template" excludes="*.svn" />
			<zipfileset dir="model_efdc" prefix="openda_${version}/model_efdc" excludes="*.svn"/>
			<zipfileset dir="model_efdc_dll" prefix="openda_${version}/model_efdc_dll" excludes="*.svn"/>
			<zipfileset dir="model_example_fortran" prefix="openda_${version}/model_example_fortran" excludes="*.svn" />
			<zipfileset dir="model_example_blackbox" prefix="openda_${version}/model_example_blackbox" excludes="*.svn" />
			<zipfileset dir="model_hspf" prefix="openda_${version}/model_hspf" excludes="*.svn"/>
			<zipfileset dir="model_swan" prefix="openda_${version}/model_swan" excludes="*.svn" />
			<zipfileset dir="model_wflow" prefix="openda_${version}/model_wflow" excludes="*.svn"/>
			<zipfileset dir="." includes="build.xml" prefix="openda_${version}" />
			<zipfileset dir="." includes="project.properties" prefix="openda_${version}" />
			<zipfileset dir="." includes="unit_test_info.txt"  prefix="openda_${version}" />
			<zipfileset dir="." includes="README.txt" fullpath="openda_${version}/README_r${svn.revision}.txt"/>
			<zipfileset dir="." includes="license.txt" fullpath="openda_${version}/license.txt"/>
			<zipfileset dir="." includes="release-notes-2.0.pdf " fullpath="openda_${version}/release-notes-2.0.pdf"/>
			<zipfileset dir="." includes="select_this_version.sh"  prefix="openda_${version}" />
		</zip>
    </target>
    <target name="zip-bin">
		<zip destfile="${projectname}_${version}_r${svn.revision}_bin.zip">
			<zipfileset dir="bin" prefix="openda_${version}/bin"/>
			<zipfileset dir="doc" prefix="openda_${version}/doc"/>
			<zipfileset dir="tests" prefix="openda_${version}/examples" excludes="*.svn" />
			<zipfileset dir="xmlSchemas" prefix="openda_${version}/xmlSchemas" excludes="*.svn" />
			<zipfileset dir="jre" prefix="openda_${version}/jre" excludes="*.svn" />
			<zipfileset dir="." includes="README.txt" fullpath="openda_${version}/README_r${svn.revision}.txt"/>
			<zipfileset dir="." includes="license.txt" fullpath="openda_${version}/license.txt"/>
			<zipfileset dir="." includes="release-notes-2.0.pdf " fullpath="openda_${version}/release-notes-2.0.pdf"/>
			<zipfileset dir="." includes="select_this_version.sh"  prefix="openda_${version}" />
		</zip>
    </target>
    <target name="zip-doc">
		<zip destfile="${projectname}_${version}_r${svn.revision}_doc.zip">
		    <zipfileset dir="doc" prefix="openda_${version}/doc"/>
			<zipfileset dir="." includes="README.txt" fullpath="openda_${version}/README_r${svn.revision}.txt"/>
			<zipfileset dir="." includes="license.txt" fullpath="openda_${version}/license.txt"/>
			<zipfileset dir="." includes="release-notes-2.0.pdf " fullpath="openda_${version}/release-notes-2.0.pdf"/>
		</zip>
    </target>
    <target name="zip-schemas">
		<zip destfile="${projectname}_${version}_r${svn.revision}_schemas.zip">
		    <zipfileset dir="xmlSchemas" prefix="openda_${version}/xmlSchemas" excludes="*.svn" />
			<zipfileset dir="." includes="README.txt" fullpath="openda_${version}/README_r${svn.revision}.txt"/>
			<zipfileset dir="." includes="license.txt" fullpath="openda_${version}/license.txt"/>
			<zipfileset dir="." includes="release-notes-2.0.pdf " fullpath="openda_${version}/release-notes-2.0.pdf"/>
		</zip>
    </target>

    <target name="zip-jre">
		<zip destfile="${projectname}_${version}_r${svn.revision}_jre.zip">
		    <zipfileset dir="jre" prefix="openda_${version}/jre" excludes="*.svn" />
		</zip>
    </target>

    <macrodef name="ziptest">
	    <attribute name="testname" default="NOT SET"/>
	    <sequential>
		    <echo>zip example @{testname}</echo>
			<zip destfile="${projectname}_${version}_r${svn.revision}_examples_@{testname}.zip">
			    <zipfileset dir="tests/@{testname}"  prefix="openda_${version}/examples/@{testname}"/>
				<zipfileset dir="." includes="README.txt" fullpath="openda_${version}/README_r${svn.revision}.txt"/>
			</zip>
	    </sequential>
    </macrodef>

    <target name="zip-tests"> <!-- depends="svn-revision"> -->
        <ziptest testname="native_oscillator" />
        <ziptest testname="native_parallel" />
    	<ziptest testname="simple_lorenz" />
        <ziptest testname="simple_lorenz_transformed_observations" />
    	<ziptest testname="simple_lorenz96" />
    	<ziptest testname="simple_oscillator" />
        <ziptest testname="simple_resultwriters" />
    	<ziptest testname="simple_two_oscillators" />
    </target>

    <target name="chmod-linux-native">
	<chmod perm="ug+rx" dir="${projectdir}/core/native_bin/" includes="*.sh" verbose="true"/>
	<chmod perm="ug+rx" dir="${projectdir}/core/native_bin/linux32_gnu/bin" includes="**" verbose="true"/>
	<chmod perm="ug+rx" dir="${projectdir}/core/native_bin/linux32_gnu/lib" includes="**" verbose="true"/>
    </target>
	<!--
	===========================================================================
	    Tests: Unit tests
	===========================================================================
	-->

     <!-- compile test classes -->
    <target name="testclasses">
        <mkdir dir="${testbuilddir}"/>
    	<buildmoduletests module="core" />
    	<buildmoduletests module="observers" />
    	<buildmoduletests module="models" />
    	<buildmoduletests module="algorithms" />
    	<buildmoduletests module="application" />
        <buildmoduletests module="model_efdc" />
        <buildmoduletests module="model_efdc_dll"/>
        <buildmoduletests module="model_example_blackbox" />
        <buildmoduletests module="model_example_fortran" />
        <buildmoduletests module="model_hspf" />
        <buildmoduletests module="model_swan"/> 
        <buildmoduletests module="model_wflow"/>
    </target>

    <macrodef name="buildmoduletests">
        <attribute name="module" default="NOT SET"/>
        <sequential>
            <echo>build tests for module @{module}</echo>
            <ant antfile="build.xml" dir="@{module}" target="build-test" inheritAll="false" />
            <copy todir="${testbuilddir}" >
                <fileset dir="@{module}/build-test" />
            </copy>
        </sequential>
    </macrodef>
	
    <target name="test" depends="testclasses">
        <mkdir dir="${testreportdir}"/>
        <mkdir dir="${testrundir}"/>
        
        <echo>Java library path = ${java.library.path}</echo>

    	<junit printsummary="withOutAndErr" dir="${projectdir}" fork="yes" timeout="1200000" maxmemory="${maxmemory}">
            <jvmarg value="-ea"/>
            <jvmarg value="-esa"/>
            <batchtest todir="${testreportdir}">
                <fileset dir="${testbuilddir}">
                    <include name="**/*Test.class"/>

                    <!-- BROKEN - FIX THEM -->
                    <exclude name="**/SomeBrokenTest.class"/>

                </fileset>
            </batchtest>
        	<formatter type="xml" usefile="true"/>
            <!--<formatter type="plain" usefile="true"/>-->
            <classpath>
                <fileset dir="${projectbin}">
                    <include name="*.jar"/>
                </fileset>
                <pathelement path="${testbuilddir}"/>
            </classpath>
        </junit>
    	
    </target>

    <target name="test-linux32-teamcity">
	
        <chmod perm="ugo+rx" dir="${projectbin}" includes="*.sh" verbose="true"/>
	    <chmod perm="ugo+rx" dir="${projectbin}/linux32_gnu/bin" includes="**" verbose="true"/>
        <chmod perm="ugo+rx" dir="${projectbin}/linux32_gnu/lib" includes="**" verbose="true"/>

        <echo>Turning on X11 Windows server for GUI tests... </echo>
        <exec executable="Xvfb" os="linux">
           <arg value=":1"/>
           <arg value="-screen"/>
           <arg value="0"/>
           <arg value="1024x768x24"/>
        </exec>     

        <ant target="test"/>

        <echo>Turning off X11 Windows server... </echo>
       	<exec executable="killall" os="linux">
    	         <arg value="Xvfb"/>
    	</exec> 

     </target>

</project>

